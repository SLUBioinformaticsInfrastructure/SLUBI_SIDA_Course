{
  "hash": "bc4b9a24b8d174c8f52e4faa75410b45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using R in Quarto\"\n---\n\n\n## Introduction\n\nAs you've seen, Quarto is a really neat tool to integrate different programming languages, aggregate analyses, and write reports. One of the most commonly used languages in bioinformatics is R, and we wanted to show you some neat tips and tricks that we use often to make things a bit easier. Of course, please have a look at the [R for Data Science](https://r4ds.hadley.nz) book for more practical tips. \n\nWhat we are showing you here works just as well with R Markdown, so if you are already using that, or would prefer to work in the R GUI, please feel free to do so.\n\n## Code in R\n\nIn R, you have the option of working in the `console`, in an `R script` or in an `R Markdown` (among many options). Within the console, you execute code bit by bit. Within an R script you can execute code line-by-line, in sections, or as a whole. In R Markdown, you create a `chunk` that you can also execute line-by-line or as a whole block. In Quarto, you will use chunks as well.\n\nA chunk is a bit of code surrounded by backticks. A single backtick `highlights things` like this. A chunk is started with 3 backticks, filled with code, and closed with 3 backticks. You also indicate the language you will code in with curly brackets and the language you want to use.\n\n\n::: {.callout-tip}\nIf you add a fullstop in front of the language, your code is shown but it is not executed\n{r} would run an R chunk, but {.r} would not\n:::\n\n### Suppressing warnings\n\nR produces a lot of warnings! Sometimes these warning are useful, but most of the time, they aren't useful for us. If we look back at yesterday's example of running R in Quarto:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, palmerpenguins)\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Day4Session3_r_in_quarto_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThere are 2 warnings about removing 2 rows. There are also some warnings about the libraries. \n\nTo remove these for a whole document, you can add this to the `title` section of your page to apply only to the page it is on (the title would be your title, this title is just this page's title):\n\n```{.bash}\ntitle: \"Using R in Quarto\"\nwarning: false\n---\n```\n\nYou can also silence warnings for particular blocks (because sometimes you might care about the warnings!) In that case, you would add this in the first line of your chunk:\n\n```{.bash}\n#| warning: false\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, palmerpenguins)\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](Day4Session3_r_in_quarto_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## Useful Packages We Love!\n\nThere are plenty of really cool packages out there, but the 2 that stand out to us to help with project management and organisation, and keep your environment easy to use are `pacman` and `here`\n\n### pacman\n\n[pacman](https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html) is a **pac**kage **man**ager that checks whether you have a library installed before loading it with the `p_load` function that you can see in the chunks above. If you don't have the package installed, it checks several repositories, installs it, and loads it. If you have it installed, it simply loads it. You can install particular versions with it, install GitHub packages, unload particular packages, as well as temporarily installing packages. This has made life with R a lot easier, especially if you are supporting users/students across multiple versions of R!\n\n### here\n\n[here](https://here.r-lib.org) is a smoother way of setting working directories in R. It sets the working directory relative to a file that is pointed to with the `here::i_am(\"file\")` command. This is incredibly useful when you are sharing projects and scripts between different people. As long as you are sharing the whole folder and don't change the architecture (like renaming files and folders), the script will work the same on each system- no more manually changing the `setwd()` command!\n",
    "supporting": [
      "Day4Session3_r_in_quarto_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}